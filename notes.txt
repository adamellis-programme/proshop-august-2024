1 -- create frontend / backend folder structure 
2 -- get setup for git 
        -- when we use create react app it creates a git repo folder 
            in a .git folder within the 'frontend' folder
        -- within fronted terminal type ls -a to see all folders including the hidden ones
           we see the .git ** we need to remove this folder **
           WE REMOVE THIS WITH rm -rf .git
        -- check it is gone with ls -a 
        -- lastly take the .gitignore from frontend and place in the root
        -- git igpnore goes in the root as we have a backend / uploads folder in the ROOT dir
        -- within the gitignore file 
            - remove the slash from node_modules
            - add .env to gitignore
        -- initilize a git repo ** IN THE ROOT **
            1 - git init  (ls -a to see the .git in the root)
            2 - go to gothub and create a new repo
            3 - copy the code from 'â€¦or push an existing repository from the command line'
            4 - in the terminal type    
                    a - git add .
                    b - git commit -m 'comment'
                    c - past in code git remote add origin 
                    d - git push origin <----> (normally main or checkout first)


3 -- set up server 
    -- change from common js to es module 
        -- go to package.json and add a type module value 
    -- create a server side package .json ** IN THE ROOT **
    -- install dependencies such as express and nodemon
    -- clg hello world to test
    -- as using ES MOULES WE NEED TO ADD .JS ON THE FROM 


4 -- install dotenv as a -D 'DEV DEPENDENCY'
**  ALWAYS RESTART SERVER WHEN DOT ENV VARIABLES ARE CHANGED **

        -- install axios in the frontend


5 -- install mongoose in the root 
     -- in backend create config file with file  db.js
     -- Calling connectDB from server 
     -- needs to be called in server file as it is at the begining of app

6 -- data seedding -- good for prototyping and testing 
        -- remove ids from dummy data 
        -- connect user to product in seed script
        -- new file in data of users.js
        -- create script to take products and users and insert into the database
        -- create a file in backend folder called seeder
            process.argv
               -- use indexes to create a command of -d
               use commands:
               a - insert 
               b - clear database out
                    -- "data:destroy": "node backend/seeder -d"

7 --  postman -- makes the http requests to the backnd while we do not have any frontend to use
        -- first create a new workspace
        -- then create an eviroment with enviroment VARIABLES
        -- make baseURL variable http://localhost:5001/api/ = REST
        -- in the dropdown make sure we say we want to use the proshop environment 
            AND CLICK SAVE
        -- then go to APIS > create new api
        -- set up requests in a collection 
            - products, users, collections
            -- under products ADD NEW REQ (GET, POST, PUT ETC)
            --- {{baseURL}}/products
            ---- {{baseURL}}/products/:id


8 --  Routes 
    -- express has a Router we can use to put our
       routes in seperate files
            create files in BE
                - routes.js  

                create async handler before wwe fetch data from database 
                this is an elegant error handling solution

        - create new folder in backend 'middleware'


9 -- Error middleware by if call next(err) this will bypass all other middleware and call the next err middleware
    this basicly SKIPS all other middleware as there will be an error

    asynchronous errors need to have the error middleware 
    if we do not have any custom error middleware then the 
    UGLY custom html middleware will be hit

    anything passed to the next('cheese') will be percieved as an error and 
    we then get back the custom html error

    if next() is empty it will then call the next middlewart the res
    the default err middleware runs at the end of the stack and sends the html back to  the client 

    err middleware always at the end of the middleware stack

    contact default err middleware by calling next(err) 



10--  REDUX
            install redux npm install @reduxjs/toolkit react-redux
11--            - https://redux.js.org/introduction/installation
                
                * Using dispatch() allows the use of middleware. If we are making async operations, 
                * it needs to go through dispatch so that the middleware can intercept and handle 
                * those actions appropriately. It also allows you to centralize control over state changes.
                * https://redux.js.org/api/store#dispatchaction
                * https://redux.js.org/api/store#dispatchaction



12-- PREPARE ALL SKELETON ROUTES IN ONE GO
            skeleton out all routes that just 
            return a simple striing 
            -- create userRoutes.js
            -- create userController.js

    Test in postman  --  test all routes in postman (get back the string)
        -- add new collection (folder)
        -- click make new requset (will open up a req screen)

13-- Set express middleware to handle json
            -- middleware for parsing body data

                    !!Promise.resolve(false) // true
                    !!Promise.reject(false) // true
                    !!Promise.reject(true) // true

            -- If you don't await, then by using the && operator you are type coercing a Promise to a boolean value, which will be true.
            -- we do not have to use a promise as bcrypt already returns a promis


14-- JSON web token
                -- install in the backend which will be the root
                -- make the cookie in server and test with postman  
                -- we can see the cookie sent in postman 
                    look in the response headers in POSTMAN to see cookie data 


            -- once we log in the coockie gets sent along with every req 
            -- create a jwt and set in a cookie
            -- install a cookie parser middlewart

15-- FRONT END AUTH


            -- authSlice adds a user to local storage 
                this tells the frontend there is a 
                vallidated user

               --  we do not add products and users api to the slice 
               -- is they are childs of the api slice 
               -- injecting endpoints so this makes it a child

               


15-- 
15-- 
15-- 
15-- 